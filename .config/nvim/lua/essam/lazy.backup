
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable", -- latest stable release
        lazypath,
    })
end
vim.opt.rtp:prepend(lazypath)

vim.g.mapleader = " "


return require('lazy').setup({

    {
        'nvim-telescope/telescope.nvim',
        tag = '0.1.4',
        -- or                              , branch = '0.1.x',
        dependencies = { 'nvim-lua/plenary.nvim' }
    },
    'nvim-telescope/telescope-file-browser.nvim',

    'navarasu/onedark.nvim',
    { 'nvim-treesitter/nvim-treesitter' },
    'mbbill/undotree',
    { 'VonHeikemen/lsp-zero.nvim',        branch = 'v3.x' },
    { 'williamboman/mason.nvim' },
    { 'williamboman/mason-lspconfig.nvim' },

    -- LSP Support
    {
        'neovim/nvim-lspconfig',
        dependencies = { 'nvimdev/lspsaga.nvim' }
    },
    -- Autocompletion
    { 'hrsh7th/nvim-cmp' },
    { 'hrsh7th/cmp-nvim-lsp' },
    {
        'L3MON4D3/LuaSnip',
    },
    { 'hrsh7th/cmp-path' },
    { 'onsails/lspkind-nvim' },
    { 'saadparwaiz1/cmp_luasnip' },
    { 'hrsh7th/cmp-buffer' },
    { 'hrsh7th/cmp-cmdline' }
    , { 'hrsh7th/cmp-nvim-lua' },
    {
        'windwp/nvim-autopairs',
        event = "InsertEnter",
        opts = {} -- this is equalent to setup({}) function
    }
    ,

    'windwp/nvim-ts-autotag',
    'nvim-lualine/lualine.nvim',
    'nvim-tree/nvim-web-devicons',
    'nvimtools/none-ls.nvim',
    'christoomey/vim-tmux-navigator',
    'numToStr/Comment.nvim',
    'JoosepAlviste/nvim-ts-context-commentstring',
    'lewis6991/gitsigns.nvim',
    'nvim-tree/nvim-tree.lua',
    'moll/vim-bbye',
    'HiPhish/rainbow-delimiters.nvim',
    {
        "utilyre/barbecue.nvim",
        name = "barbecue",
        version = "*",
        dependencies = {
            "SmiteshP/nvim-navic",
            "nvim-tree/nvim-web-devicons", -- optional dependency
        },
        opts = {
            -- configurations go here
        },
    },
    {
        "kylechui/nvim-surround",
        version = "*", -- Use for stability; omit to use `main` branch for the latest features
        event = "VeryLazy",
        config = function()
            require("nvim-surround").setup({
                -- Configuration here, or leave empty to use defaults
            })
        end
    },
    {
        'kevinhwang91/nvim-ufo',
        dependencies = {
            'kevinhwang91/promise-async',
            {
                'luukvbaal/statuscol.nvim',
                config = function()
                    local builtin = require("statuscol.builtin")
                    require("statuscol").setup(
                        {
                            relculright = true,
                            segments = {
                                { text = { builtin.foldfunc },      click = "v:lua.ScFa" },
                                { text = { "%s" },                  click = "v:lua.ScSa" },
                                { text = { builtin.lnumfunc, " " }, click = "v:lua.ScLa" }
                            }
                        }
                    )
                end

            }
        }
    },
    {
        'kdheepak/lazygit.nvim',
        dependencies = { 'nvim-lua/plenary.nvim' }
    }
    ,
    'debugloop/telescope-undo.nvim'
    ,
    {
        "folke/which-key.nvim",
        config = function()
            vim.o.timeout = true
            vim.o.timeoutlen = 300
            require("which-key").setup {
                -- your configuration comes here
                -- or leave it empty to use the default settings
                -- refer to the configuration section below
            }
        end
    }
    ,
    {
        "roobert/surround-ui.nvim",
        dependencies = {
            "kylechui/nvim-surround",
            "folke/which-key.nvim",
        },
        config = function()
            require("surround-ui").setup({
                root_key = "S"
            })
        end,
    },
    'norcalli/nvim-colorizer.lua',
    'f-person/git-blame.nvim',
    --[[ 'MunifTanjim/nui.nvim' ,]]

    {
        'antosha417/nvim-lsp-file-operations',
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-tree/nvim-tree.lua",
        }
    }
    ,
    {
        'kdheepak/tabline.nvim',
        config = function()
            require 'tabline'.setup {
                -- Defaults configuration options
                enable = true,
                options = {
                    -- If lualine is installed tabline will use separators configured in lualine by default.
                    -- These options can be used to override those settings.
                    section_separators = { '', '' },
                    component_separators = { '', '' },
                    max_bufferline_percent = 66, -- set to nil by default, and it uses vim.o.columns * 2/3
                    show_tabs_always = false,    -- this shows tabs only when there are more than one tab or if the first tab is named
                    show_devicons = true,        -- this shows devicons in buffer section
                    show_bufnr = false,          -- this appends [bufnr] to buffer section,
                    show_filename_only = false,  -- shows base filename only instead of relative path in filename
                    modified_icon = "+ ",        -- change the default modified icon
                    modified_italic = false,     -- set to true by default; this determines whether the filename turns italic if modified
                    show_tabs_only = false,      -- this shows only tabs instead of tabs + buffers
                }
            }
            vim.cmd [[
      set guioptions-=e " Use showtabline in gui vim
      set sessionoptions+=tabpages,globals " store tabpages and globals in session
            ]]
        end,
    }
})
